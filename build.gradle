import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.19.0'
}

ext {
    copyright = '2019-2025 Ipregistry'
}

group = 'co.ipregistry'
version = '5.0.1'
description = 'Official Java client for Ipregistry, a fast, reliable IP geolocation and threat data API.'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Created-By': 'Gradle ${gradle.gradleVersion}',
                'Name': 'co/ipregistry/api/client/',
                'Specification-Title': 'Ipregistry Client',
                'Specification-Version': project.version,
                'Specification-Vendor': 'Ipregistry',
                'Implementation-Title': 'co.ipregistry.api.client',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Ipregistry',
        )
    }
}






javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    samples {
        compileClasspath += main.output + main.compileClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.40'
    compileOnly 'org.projectlombok:lombok:1.18.40'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.5'
    implementation 'com.maxmind.db:maxmind-db:3.2.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.19.0'

    integrationTestImplementation 'io.rest-assured:rest-assured:5.5.6'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

test {
    useJUnitPlatform()
}

integrationTest {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'co.ipregistry'
            artifactId = 'ipregistry-client'
            from components.java
            
            pom {
                name = 'Ipregistry Client'
                description = 'Official Java client for Ipregistry, a fast, reliable IP geolocation and threat data API.'
                url = 'https://github.com/ipregistry/ipregistry-java'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                
                developers {
                    developer {
                        name = 'Ipregistry Team'
                        organizationUrl = 'https://ipregistry.co'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/ipregistry/ipregistry-java.git'
                    developerConnection = 'scm:git:ssh://github.com:ipregistry/ipregistry-java.git'
                    url = 'https://github.com/ipregistry/ipregistry-java/tree/main'
                }
            }
        }
    }
    
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

// No signing configuration in build.gradle - JReleaser will handle it

jreleaser {
    configFile = file('jreleaser.yml')
}
