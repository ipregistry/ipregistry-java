import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'co.ipregistry'
version = '4.0.0'

repositories {
    mavenCentral()
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

jar {
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Created-By': 'Gradle ${gradle.gradleVersion}',
                'Name': 'co/ipregistry/api/client/',
                'Specification-Title': 'Ipregistry Client',
                'Specification-Version': project.version,
                'Specification-Vendor': 'Ipregistry',
                'Implementation-Title': 'co.ipregistry.api.client',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Ipregistry',
        )
    }
}



dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.3'
    implementation 'com.maxmind.db:maxmind-db:3.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.6.0'

    integrationTestImplementation 'io.rest-assured:rest-assured:5.3.2'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'co.ipregistry'
            artifactId = 'ipregistry-client'
            version = project.version
            from components.java

            pom {
                name = 'Ipregistry Java Client'
                packaging = 'jar'
                description = 'Official Java client for Ipregistry, a fast, reliable IP geolocation and threat data API.'
                url = 'https://github.com/ipregistry/ipregistry-java'

                developers {
                    developer {
                        id = 'ipregistry-team'
                        name = 'Ipregistry Team'
                        email = 'support@ipregistry.co'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection = 'scm:git:git@github.com:ipregistry/ipregistry-java.git'
                    developerConnection = 'scm:git:git@github.com:ipregistry/ipregistry-java.git'
                    url = 'https://github.com/ipregistry/ipregistry-java.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    samples {
        compileClasspath += main.output + main.compileClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

test {
    useJUnitPlatform()
}

integrationTest {
    useJUnitPlatform()
}
